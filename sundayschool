<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sunday School Attendance Tracker</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;600;700&family=Nunito:wght@400;600;700;800&display=swap');
        
        body {
            font-family: 'Nunito', sans-serif;
            background-color: #f0f9ff;
            background-image: radial-gradient(#e0f2fe 1px, transparent 1px), 
                             radial-gradient(#bae6fd 1px, transparent 1px);
            background-size: 40px 40px;
            background-position: 0 0, 20px 20px;
            overflow-x: hidden;
        }
        
        h1, h2, .fun-text {
            font-family: 'Montserrat', sans-serif;
        }
        
        .header {
            background: linear-gradient(135deg, #60a5fa, #3b82f6, #2563eb, #1d4ed8);
            background-size: 400% 400%;
            animation: gradientBG 15s ease infinite;
            box-shadow: 0 4px 12px rgba(37, 99, 235, 0.5);
        }
        
        @keyframes gradientBG {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }
        
        .attendance-cell {
            transition: all 0.3s ease;
            box-shadow: 0 3px 6px rgba(0,0,0,0.1);
        }
        
        .attendance-cell:hover {
            transform: scale(1.1);
        }
        
        .present {
            background-color: #86efac;
        }
        
        .absent {
            background-color: #fca5a5;
        }
        
        .excused {
            background-color: #fcd34d;
        }
        
        @keyframes float {
            0% {
                transform: translateY(0px) rotate(0deg);
            }
            50% {
                transform: translateY(-10px) rotate(5deg);
            }
            100% {
                transform: translateY(0px) rotate(0deg);
            }
        }
        
        .floating {
            animation: float 3s ease-in-out infinite;
        }
        
        .floating-slow {
            animation: float 5s ease-in-out infinite;
        }
        
        .floating-reverse {
            animation: float 4s ease-in-out infinite reverse;
        }
        
        .cloud {
            position: absolute;
            z-index: -1;
            opacity: 0.7;
        }
        
        .cloud-1 {
            top: 10%;
            left: 5%;
            animation: float 20s ease-in-out infinite;
        }
        
        .cloud-2 {
            top: 15%;
            right: 5%;
            animation: float 25s ease-in-out infinite reverse;
        }
        
        .cloud-3 {
            bottom: 10%;
            left: 10%;
            animation: float 22s ease-in-out infinite 2s;
        }
        
        .sun {
            position: absolute;
            top: 5%;
            right: 10%;
            z-index: -1;
        }
        
        @keyframes spin-slow {
            from {
                transform: rotate(0deg);
            }
            to {
                transform: rotate(360deg);
            }
        }
        
        .sun-rays {
            animation: spin-slow 60s linear infinite;
        }
        
        .history-item {
            transition: all 0.3s ease;
        }
        
        .history-item:hover {
            transform: translateX(5px);
        }

        .action-btn {
            opacity: 0;
            transition: opacity 0.2s ease;
        }
        
        tr:hover .action-btn {
            opacity: 1;
        }

        th:hover .action-btn {
            opacity: 1;
        }
        
        .btn-primary {
            background-color: #3b82f6;
            color: white;
            border-radius: 8px;
            padding: 8px 16px;
            font-weight: bold;
            box-shadow: 0 4px 6px rgba(59, 130, 246, 0.5);
            transition: all 0.2s ease;
        }
        
        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 8px rgba(59, 130, 246, 0.5);
            background-color: #2563eb;
        }
        
        .btn-primary:active {
            transform: translateY(1px);
            box-shadow: 0 2px 4px rgba(59, 130, 246, 0.5);
        }
        
        .btn-success {
            background-color: #10b981;
            color: white;
            border-radius: 8px;
            padding: 8px 16px;
            font-weight: bold;
            box-shadow: 0 4px 6px rgba(16, 185, 129, 0.5);
            transition: all 0.2s ease;
        }
        
        .btn-success:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 8px rgba(16, 185, 129, 0.5);
            background-color: #059669;
        }
        
        .btn-success:active {
            transform: translateY(1px);
            box-shadow: 0 2px 4px rgba(16, 185, 129, 0.5);
        }
        
        .btn-danger {
            background-color: #ef4444;
            color: white;
            border-radius: 8px;
            padding: 8px 16px;
            font-weight: bold;
            box-shadow: 0 4px 6px rgba(239, 68, 68, 0.5);
            transition: all 0.2s ease;
        }
        
        .btn-danger:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 8px rgba(239, 68, 68, 0.5);
            background-color: #dc2626;
        }
        
        .btn-danger:active {
            transform: translateY(1px);
            box-shadow: 0 2px 4px rgba(239, 68, 68, 0.5);
        }
        
        .card {
            border-radius: 16px;
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
        }
        
        .table-header {
            background-color: #3b82f6;
            color: white;
        }
        
        /* Disney-inspired styles */
        .disney-header {
            background: linear-gradient(135deg, #7B68EE, #4169E1, #1E90FF, #00BFFF);
            background-size: 400% 400%;
            animation: gradientBG 15s ease infinite;
            box-shadow: 0 4px 12px rgba(75, 0, 130, 0.5);
            color: white;
            border-radius: 16px 16px 0 0;
        }
        
        .disney-card {
            border-radius: 16px;
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
            border: 2px solid #e0f2fe;
            overflow: hidden;
        }
        
        .disney-btn {
            background-color: #7B68EE;
            color: white;
            border-radius: 30px;
            padding: 10px 20px;
            font-weight: bold;
            box-shadow: 0 4px 6px rgba(123, 104, 238, 0.5);
            transition: all 0.3s ease;
            border: none;
        }
        
        .disney-btn:hover {
            transform: translateY(-3px) scale(1.05);
            box-shadow: 0 8px 15px rgba(123, 104, 238, 0.5);
            background-color: #6A5ACD;
        }
        
        .disney-btn:active {
            transform: translateY(1px);
            box-shadow: 0 2px 4px rgba(123, 104, 238, 0.5);
        }
        
        .disney-success-btn {
            background-color: #00C957;
            color: white;
            border-radius: 30px;
            padding: 10px 20px;
            font-weight: bold;
            box-shadow: 0 4px 6px rgba(0, 201, 87, 0.5);
            transition: all 0.3s ease;
            border: none;
        }
        
        .disney-success-btn:hover {
            transform: translateY(-3px) scale(1.05);
            box-shadow: 0 8px 15px rgba(0, 201, 87, 0.5);
            background-color: #00B04A;
        }
        
        .disney-success-btn:active {
            transform: translateY(1px);
            box-shadow: 0 2px 4px rgba(0, 201, 87, 0.5);
        }
        
        .disney-danger-btn {
            background-color: #FF6347;
            color: white;
            border-radius: 30px;
            padding: 10px 20px;
            font-weight: bold;
            box-shadow: 0 4px 6px rgba(255, 99, 71, 0.5);
            transition: all 0.3s ease;
            border: none;
        }
        
        .disney-danger-btn:hover {
            transform: translateY(-3px) scale(1.05);
            box-shadow: 0 8px 15px rgba(255, 99, 71, 0.5);
            background-color: #FF4500;
        }
        
        .disney-danger-btn:active {
            transform: translateY(1px);
            box-shadow: 0 2px 4px rgba(255, 99, 71, 0.5);
        }
        
        .disney-input {
            border-radius: 30px !important;
            border: 2px solid #7B68EE !important;
            padding: 10px 20px !important;
            box-shadow: 0 2px 4px rgba(123, 104, 238, 0.2) !important;
            transition: all 0.3s ease !important;
        }
        
        .disney-input:focus {
            border-color: #6A5ACD !important;
            box-shadow: 0 4px 8px rgba(123, 104, 238, 0.3) !important;
            transform: translateY(-2px) !important;
        }
        
        .present {
            background-color: #00C957;
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0% {
                transform: scale(1);
                box-shadow: 0 0 0 0 rgba(0, 201, 87, 0.7);
            }
            
            70% {
                transform: scale(1.05);
                box-shadow: 0 0 0 10px rgba(0, 201, 87, 0);
            }
            
            100% {
                transform: scale(1);
                box-shadow: 0 0 0 0 rgba(0, 201, 87, 0);
            }
        }
        
        .absent {
            background-color: #FF6347;
        }
        
        .excused {
            background-color: #FFD700;
            position: relative;
        }
        
        .disney-table-header {
            background: linear-gradient(135deg, #7B68EE, #4169E1);
            color: white;
            font-weight: bold;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.2);
        }
        
        .disney-table-row:nth-child(even) {
            background-color: #f0f7ff;
        }
        
        .disney-table-row:nth-child(odd) {
            background-color: #ffffff;
        }
        
        .disney-table-row:hover {
            background-color: #e6f0ff;
        }
        
        /* Header animations */
        .header-sun {
            width: 60px;
            height: 60px;
            position: relative;
            margin-right: 15px;
        }
        
        .header-sun-center {
            position: absolute;
            width: 40px;
            height: 40px;
            top: 10px;
            left: 10px;
            z-index: 2;
        }
        
        .header-sun-rays {
            position: absolute;
            width: 60px;
            height: 60px;
            top: 0;
            left: 0;
            animation: spin-slow 30s linear infinite;
            z-index: 1;
        }
        
        .header-cloud {
            position: absolute;
            animation: float 8s ease-in-out infinite;
        }
        
        .header-cloud-1 {
            top: -15px;
            left: 50px;
            animation-delay: 0s;
        }
        
        .header-cloud-2 {
            top: 20px;
            left: 10px;
            animation-delay: 1s;
            transform: scale(0.7);
        }
        
        /* Animal sticker animation */
        .animal-sticker {
            position: fixed;
            z-index: 9999;
            width: 80px;
            height: 80px;
            pointer-events: none;
            opacity: 0;
            transform: scale(0.2);
            transition: opacity 0.2s ease;
        }
        
        @keyframes pop-sticker {
            0% {
                transform: scale(0.2) rotate(-20deg);
                opacity: 0;
            }
            50% {
                transform: scale(1.2) rotate(10deg);
                opacity: 1;
            }
            80% {
                transform: scale(0.9) rotate(0deg);
                opacity: 1;
            }
            100% {
                transform: scale(1) rotate(0deg);
                opacity: 1;
            }
        }
        
        @keyframes float-away {
            0% {
                transform: translate(0, 0) rotate(0deg) scale(1);
                opacity: 1;
            }
            100% {
                transform: translate(var(--float-x), var(--float-y)) rotate(var(--float-rotate)) scale(0.5);
                opacity: 0;
            }
        }
        
        .animal-sticker.active {
            animation: pop-sticker 0.5s forwards, float-away 1.5s forwards 1s;
        }
        
        /* Excused comment tooltip */
        .excused-comment {
            position: absolute;
            bottom: 100%;
            left: 50%;
            transform: translateX(-50%);
            background-color: #fff;
            border: 2px solid #FFD700;
            border-radius: 8px;
            padding: 8px 12px;
            width: max-content;
            max-width: 200px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s, visibility 0.3s;
            z-index: 10;
        }
        
        .excused-comment::after {
            content: '';
            position: absolute;
            top: 100%;
            left: 50%;
            margin-left: -8px;
            border-width: 8px;
            border-style: solid;
            border-color: #FFD700 transparent transparent transparent;
        }
        
        .excused-cell:hover .excused-comment {
            opacity: 1;
            visibility: visible;
        }
        
        .comment-indicator {
            position: absolute;
            top: -5px;
            right: -5px;
            width: 16px;
            height: 16px;
            background-color: #FF6347;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 10px;
            font-weight: bold;
        }
        
        /* Kindness Stars styles */
        .kindness-stars {
            min-width: 120px;
            max-width: 120px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: normal;
            word-wrap: break-word;
            line-height: 1.2;
            padding: 8px;
            border-radius: 8px;
            background-color: #f8f9ff;
            border: 1px dashed #c7d2fe;
            min-height: 40px;
            font-size: 14px;
            transition: all 0.3s ease;
        }
        
        .kindness-stars:hover {
            background-color: #eef2ff;
            box-shadow: 0 2px 8px rgba(99, 102, 241, 0.2);
        }
        
        .emoji-btn {
            font-size: 18px;
            width: 36px;
            height: 36px;
            border-radius: 50%;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            margin: 0 2px;
            cursor: pointer;
            transition: all 0.2s ease;
            background-color: #f3f4f6;
            border: 1px solid #e5e7eb;
        }
        
        .emoji-btn:hover {
            transform: scale(1.1);
            background-color: #e5e7eb;
        }
        
        .emoji-btn:active {
            transform: scale(0.95);
        }
        
        .emoji-star {
            background-color: #fef3c7;
            border-color: #fde68a;
        }
        
        .emoji-pray {
            background-color: #e0f2fe;
            border-color: #bae6fd;
        }
        
        .emoji-help {
            background-color: #dcfce7;
            border-color: #bbf7d0;
        }
        
        @keyframes pop-emoji {
            0% {
                transform: scale(0.5);
                opacity: 0;
            }
            70% {
                transform: scale(1.2);
            }
            100% {
                transform: scale(1);
                opacity: 1;
            }
        }
        
        .emoji-pop {
            animation: pop-emoji 0.3s forwards;
        }
    </style>
</head>
<body class="min-h-screen">
    <!-- Animal Stickers Container -->
    <div id="animal-stickers-container"></div>
    
    <!-- Decorative elements -->
    <div class="cloud cloud-1">
        <svg width="200" height="120" viewBox="0 0 200 120" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M40 80C18 80 0 62 0 40C0 18 18 0 40 0C56 0 70 10 76 24C82 10 96 0 112 0C134 0 152 18 152 40C152 44 151 48 150 52C158 46 168 42 180 42C192 42 200 50 200 62C200 74 192 82 180 82H40V80Z" fill="white"/>
        </svg>
    </div>
    
    <div class="cloud cloud-2">
        <svg width="160" height="100" viewBox="0 0 160 100" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M32 64C14.4 64 0 49.6 0 32C0 14.4 14.4 0 32 0C44.8 0 56 8 60.8 19.2C65.6 8 76.8 0 89.6 0C107.2 0 121.6 14.4 121.6 32C121.6 35.2 120.8 38.4 120 41.6C126.4 36.8 134.4 33.6 144 33.6C153.6 33.6 160 40 160 49.6C160 59.2 153.6 65.6 144 65.6H32V64Z" fill="white"/>
        </svg>
    </div>
    
    <div class="cloud cloud-3">
        <svg width="180" height="110" viewBox="0 0 180 110" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M36 72C16.2 72 0 55.8 0 36C0 16.2 16.2 0 36 0C50.4 0 63 9 68.4 21.6C73.8 9 86.4 0 100.8 0C120.6 0 136.8 16.2 136.8 36C136.8 39.6 136 43.2 135 46.8C142.2 41.4 151.2 37.8 162 37.8C172.8 37.8 180 45 180 55.8C180 66.6 172.8 73.8 162 73.8H36V72Z" fill="white"/>
        </svg>
    </div>
    
    <div class="sun">
        <div class="sun-center">
            <svg width="100" height="100" viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg">
                <circle cx="50" cy="50" r="30" fill="#FFD700" />
                <circle cx="40" cy="40" r="5" fill="#FFFFFF" />
                <path d="M60 55C60 57.7614 57.7614 60 55 60C52.2386 60 50 57.7614 50 55C50 52.2386 52.2386 50 55 50C57.7614 50 60 52.2386 60 55Z" fill="#FFFFFF" />
                <path d="M45 65C45 67.7614 42.7614 70 40 70C37.2386 70 35 67.7614 35 65C35 62.2386 37.2386 60 40 60C42.7614 60 45 62.2386 45 65Z" fill="#FFFFFF" />
            </svg>
        </div>
        <div class="sun-rays">
            <svg width="160" height="160" viewBox="0 0 160 160" fill="none" xmlns="http://www.w3.org/2000/svg">
                <line x1="80" y1="0" x2="80" y2="20" stroke="#FFD700" stroke-width="4" />
                <line x1="80" y1="140" x2="80" y2="160" stroke="#FFD700" stroke-width="4" />
                <line x1="0" y1="80" x2="20" y2="80" stroke="#FFD700" stroke-width="4" />
                <line x1="140" y1="80" x2="160" y2="80" stroke="#FFD700" stroke-width="4" />
                <line x1="23.4315" y1="23.4315" x2="37.4315" y2="37.4315" stroke="#FFD700" stroke-width="4" />
                <line x1="122.426" y1="122.426" x2="136.426" y2="136.426" stroke="#FFD700" stroke-width="4" />
                <line x1="23.4315" y1="136.426" x2="37.4315" y2="122.426" stroke="#FFD700" stroke-width="4" />
                <line x1="122.426" y1="37.4315" x2="136.426" y2="23.4315" stroke="#FFD700" stroke-width="4" />
            </svg>
        </div>
    </div>
    
    <header class="disney-header py-6 px-6 text-white mb-8">
        <div class="container mx-auto flex justify-between items-center">
            <div class="flex items-center gap-4">
                <!-- Sun and Cloud Animation in Header -->
                <div class="relative w-16 h-16">
                    <!-- Sun Animation -->
                    <div class="header-sun">
                        <div class="header-sun-center">
                            <svg width="40" height="40" viewBox="0 0 40 40" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <circle cx="20" cy="20" r="15" fill="#FFD700" />
                                <circle cx="16" cy="16" r="3" fill="#FFFFFF" />
                                <circle cx="24" cy="22" r="2" fill="#FFFFFF" />
                            </svg>
                        </div>
                        <div class="header-sun-rays">
                            <svg width="60" height="60" viewBox="0 0 60 60" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <line x1="30" y1="0" x2="30" y2="8" stroke="#FFD700" stroke-width="2" />
                                <line x1="30" y1="52" x2="30" y2="60" stroke="#FFD700" stroke-width="2" />
                                <line x1="0" y1="30" x2="8" y2="30" stroke="#FFD700" stroke-width="2" />
                                <line x1="52" y1="30" x2="60" y2="30" stroke="#FFD700" stroke-width="2" />
                                <line x1="8.7868" y1="8.7868" x2="14.1421" y2="14.1421" stroke="#FFD700" stroke-width="2" />
                                <line x1="45.8579" y1="45.8579" x2="51.2132" y2="51.2132" stroke="#FFD700" stroke-width="2" />
                                <line x1="8.7868" y1="51.2132" x2="14.1421" y2="45.8579" stroke="#FFD700" stroke-width="2" />
                                <line x1="45.8579" y1="14.1421" x2="51.2132" y2="8.7868" stroke="#FFD700" stroke-width="2" />
                            </svg>
                        </div>
                    </div>
                    
                    <!-- Cloud Animations -->
                    <div class="header-cloud header-cloud-1">
                        <svg width="40" height="24" viewBox="0 0 40 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M8 16C3.6 16 0 12.4 0 8C0 3.6 3.6 0 8 0C11.2 0 14 2 15.2 4.8C16.4 2 19.2 0 22.4 0C26.8 0 30.4 3.6 30.4 8C30.4 8.8 30.2 9.6 30 10.4C31.6 9.2 33.6 8.4 36 8.4C38.4 8.4 40 10 40 12.4C40 14.8 38.4 16.4 36 16.4H8V16Z" fill="white"/>
                        </svg>
                    </div>
                    <div class="header-cloud header-cloud-2">
                        <svg width="30" height="18" viewBox="0 0 30 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M6 12C2.7 12 0 9.3 0 6C0 2.7 2.7 0 6 0C8.4 0 10.5 1.5 11.4 3.6C12.3 1.5 14.4 0 16.8 0C20.1 0 22.8 2.7 22.8 6C22.8 6.6 22.65 7.2 22.5 7.8C23.7 6.9 25.2 6.3 27 6.3C28.8 6.3 30 7.5 30 9.3C30 11.1 28.8 12.3 27 12.3H6V12Z" fill="white"/>
                        </svg>
                    </div>
                </div>
                <div>
                    <h1 class="text-3xl font-bold text-shadow">Sunday School</h1>
                    <p class="text-xl">Attendance Tracker</p>
                </div>
            </div>
            <div class="flex gap-4">
                <button id="add-student-btn" class="disney-btn flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                        <path d="M8 9a3 3 0 100-6 3 3 0 000 6zM8 11a6 6 0 016 6H2a6 6 0 016-6zM16 7a1 1 0 10-2 0v1h-1a1 1 0 100 2h1v1a1 1 0 102 0v-1h1a1 1 0 100-2h-1V7z" />
                    </svg>
                    Add Student
                </button>
                <button id="add-date-btn" class="disney-btn flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd" />
                    </svg>
                    Add Date
                </button>
                <button id="save-snapshot-btn" class="disney-success-btn flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                        <path d="M7.707 10.293a1 1 0 10-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L11 11.586V6h5a2 2 0 012 2v7a2 2 0 01-2 2H4a2 2 0 01-2-2V8a2 2 0 012-2h5v5.586l-1.293-1.293zM9 4a1 1 0 012 0v2H9V4z" />
                    </svg>
                    Save Snapshot
                </button>
            </div>
        </div>
    </header>
    
    <main class="container mx-auto px-4 pb-12">
        <div class="disney-card bg-white p-6 mb-8 overflow-x-auto">
            <div class="flex flex-wrap items-center mb-6 gap-4">
                <div class="flex items-center bg-green-100 px-4 py-2 rounded-full">
                    <div class="w-6 h-6 bg-green-300 rounded-full mr-2 flex items-center justify-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-green-800" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                        </svg>
                    </div>
                    <span class="font-bold">Present</span>
                </div>
                <div class="flex items-center bg-red-100 px-4 py-2 rounded-full">
                    <div class="w-6 h-6 bg-red-300 rounded-full mr-2 flex items-center justify-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-red-800" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                        </svg>
                    </div>
                    <span class="font-bold">Absent</span>
                </div>
                <div class="flex items-center bg-yellow-100 px-4 py-2 rounded-full">
                    <div class="w-6 h-6 bg-yellow-300 rounded-full mr-2 flex items-center justify-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-yellow-800" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
                        </svg>
                    </div>
                    <span class="font-bold">Excused</span>
                </div>
                <div class="ml-auto text-sm text-purple-600 italic">
                    Click on circles to change attendance status
                </div>
            </div>
            
            <!-- Kindness Stars Legend -->
            <div class="mb-6 bg-indigo-50 p-4 rounded-xl">
                <h3 class="text-lg font-bold text-indigo-700 mb-2">Kindness Stars</h3>
                <div class="flex flex-wrap gap-3 items-center">
                    <div class="flex items-center">
                        <button class="emoji-btn emoji-star" data-emoji="⭐">⭐</button>
                        <span class="ml-1 text-sm">Star</span>
                    </div>
                    <div class="flex items-center">
                        <button class="emoji-btn emoji-pray" data-emoji="🙏">🙏</button>
                        <span class="ml-1 text-sm">Prayer</span>
                    </div>
                    <div class="flex items-center">
                        <button class="emoji-btn emoji-help" data-emoji="🤝">🤝</button>
                        <span class="ml-1 text-sm">Helping</span>
                    </div>
                    <div class="ml-auto text-sm text-purple-600 italic">
                        Click on emojis to add them to a student's kindness stars
                    </div>
                </div>
            </div>
            
            <div class="overflow-x-auto">
                <table id="attendance-table" class="min-w-full">
                    <thead>
                        <tr>
                            <th class="px-4 py-3 disney-table-header text-left rounded-tl-lg">Kindness Stars</th>
                            <th class="px-4 py-3 disney-table-header text-left">Student Name</th>
                            <th class="px-4 py-3 disney-table-header text-left">Birthdate</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Table content will be generated by JavaScript -->
                    </tbody>
                </table>
            </div>
        </div>

        <!-- History Section -->
        <div class="disney-card bg-white p-6">
            <h2 class="text-2xl font-bold mb-4 text-indigo-700 flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 mr-2 text-indigo-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                Attendance History
            </h2>
            <div id="history-container" class="space-y-3 max-h-64 overflow-y-auto">
                <!-- History items will be added here -->
                <div class="text-gray-500 italic text-center py-6 bg-gray-50 rounded-xl">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto mb-2 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                    </svg>
                    <p>No history records yet.</p>
                    <p>Click "Save Snapshot" to create history!</p>
                </div>
            </div>
        </div>
    </main>
    
    <!-- Add Student Modal -->
    <div id="add-student-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-2xl p-6 w-full max-w-md">
            <h2 class="text-2xl font-bold mb-4 text-indigo-700 flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 mr-2 text-indigo-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z" />
                </svg>
                Add New Student
            </h2>
            <div class="mb-4">
                <label class="block text-gray-700 mb-2" for="student-name">Student Name</label>
                <input type="text" id="student-name" class="disney-input w-full">
            </div>
            <div class="mb-6">
                <label class="block text-gray-700 mb-2" for="student-birthdate">Birthdate</label>
                <input type="date" id="student-birthdate" class="disney-input w-full">
            </div>
            <div class="flex justify-end gap-3">
                <button id="cancel-student-btn" class="px-6 py-2 text-gray-600 hover:bg-gray-100 rounded-full transition-colors">Cancel</button>
                <button id="save-student-btn" class="disney-btn">Add Student</button>
            </div>
        </div>
    </div>
    
    <!-- Add Date Modal -->
    <div id="add-date-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-2xl p-6 w-full max-w-md">
            <h2 class="text-2xl font-bold mb-4 text-indigo-700 flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 mr-2 text-indigo-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
                Add New Date
            </h2>
            <div class="mb-6">
                <label class="block text-gray-700 mb-2" for="attendance-date">Date</label>
                <input type="date" id="attendance-date" class="disney-input w-full">
            </div>
            <div class="flex justify-end gap-3">
                <button id="cancel-date-btn" class="px-6 py-2 text-gray-600 hover:bg-gray-100 rounded-full transition-colors">Cancel</button>
                <button id="save-date-btn" class="disney-btn">Add Date</button>
            </div>
        </div>
    </div>

    <!-- Edit Student Modal -->
    <div id="edit-student-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-2xl p-6 w-full max-w-md">
            <h2 class="text-2xl font-bold mb-4 text-indigo-700 flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 mr-2 text-indigo-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                </svg>
                Edit Student
            </h2>
            <div class="mb-4">
                <label class="block text-gray-700 mb-2" for="edit-student-name">Student Name</label>
                <input type="text" id="edit-student-name" class="disney-input w-full">
                <input type="hidden" id="edit-student-id">
            </div>
            <div class="mb-6">
                <label class="block text-gray-700 mb-2" for="edit-student-birthdate">Birthdate</label>
                <input type="date" id="edit-student-birthdate" class="disney-input w-full">
            </div>
            <div class="flex justify-end gap-3">
                <button id="cancel-edit-student-btn" class="px-6 py-2 text-gray-600 hover:bg-gray-100 rounded-full transition-colors">Cancel</button>
                <button id="update-student-btn" class="disney-btn">Update</button>
            </div>
        </div>
    </div>

    <!-- Edit Date Modal -->
    <div id="edit-date-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-2xl p-6 w-full max-w-md">
            <h2 class="text-2xl font-bold mb-4 text-indigo-700 flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 mr-2 text-indigo-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                </svg>
                Edit Date
            </h2>
            <div class="mb-6">
                <label class="block text-gray-700 mb-2" for="edit-attendance-date">Date</label>
                <input type="date" id="edit-attendance-date" class="disney-input w-full">
                <input type="hidden" id="edit-date-id">
            </div>
            <div class="flex justify-end gap-3">
                <button id="cancel-edit-date-btn" class="px-6 py-2 text-gray-600 hover:bg-gray-100 rounded-full transition-colors">Cancel</button>
                <button id="update-date-btn" class="disney-btn">Update</button>
            </div>
        </div>
    </div>

    <!-- Confirmation Modal -->
    <div id="confirm-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-2xl p-6 w-full max-w-md">
            <h2 class="text-2xl font-bold mb-4 text-indigo-700" id="confirm-title">Confirm Action</h2>
            <p id="confirm-message" class="mb-6 text-gray-600">Are you sure you want to proceed with this action?</p>
            <div class="flex justify-end gap-3">
                <button id="cancel-confirm-btn" class="px-6 py-2 text-gray-600 hover:bg-gray-100 rounded-full transition-colors">Cancel</button>
                <button id="confirm-action-btn" class="disney-danger-btn">Confirm</button>
            </div>
        </div>
    </div>

    <!-- Edit Birthdate Modal -->
    <div id="edit-birthdate-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-2xl p-6 w-full max-w-md">
            <h2 class="text-2xl font-bold mb-4 text-indigo-700 flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 mr-2 text-indigo-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
                Edit Birthdate
            </h2>
            <div class="mb-6">
                <label class="block text-gray-700 mb-2" for="edit-birthdate-value">Birthdate</label>
                <input type="date" id="edit-birthdate-value" class="disney-input w-full">
                <input type="hidden" id="edit-birthdate-student-id">
            </div>
            <div class="flex justify-end gap-3">
                <button id="cancel-edit-birthdate-btn" class="px-6 py-2 text-gray-600 hover:bg-gray-100 rounded-full transition-colors">Cancel</button>
                <button id="update-birthdate-btn" class="disney-btn">Update</button>
            </div>
        </div>
    </div>

    <!-- Add Excused Comment Modal -->
    <div id="excused-comment-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-2xl p-6 w-full max-w-md">
            <h2 class="text-2xl font-bold mb-4 text-indigo-700 flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 mr-2 text-indigo-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z" />
                </svg>
                Add Excused Comment
            </h2>
            <div class="mb-6">
                <label class="block text-gray-700 mb-2" for="excused-comment-text">Reason for Absence</label>
                <textarea id="excused-comment-text" class="disney-input w-full h-32 resize-none" placeholder="Enter reason for excused absence..."></textarea>
                <input type="hidden" id="excused-student-id">
                <input type="hidden" id="excused-date-id">
            </div>
            <div class="flex justify-end gap-3">
                <button id="cancel-excused-comment-btn" class="px-6 py-2 text-gray-600 hover:bg-gray-100 rounded-full transition-colors">Cancel</button>
                <button id="save-excused-comment-btn" class="disney-btn">Save Comment</button>
            </div>
        </div>
    </div>

    <!-- Edit Kindness Stars Modal -->
    <div id="edit-kindness-stars-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-2xl p-6 w-full max-w-md">
            <h2 class="text-2xl font-bold mb-4 text-indigo-700 flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 mr-2 text-indigo-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z" />
                </svg>
                Edit Kindness Stars
            </h2>
            <div class="mb-4">
                <p class="text-gray-700 mb-2">Student: <span id="kindness-student-name" class="font-bold"></span></p>
            </div>
            <div class="mb-6">
                <label class="block text-gray-700 mb-2">Add Emoji</label>
                <div class="flex flex-wrap gap-2 mb-4">
                    <button class="emoji-btn emoji-star" data-emoji="⭐">⭐</button>
                    <button class="emoji-btn emoji-pray" data-emoji="🙏">🙏</button>
                    <button class="emoji-btn emoji-help" data-emoji="🤝">🤝</button>
                </div>
                <label class="block text-gray-700 mb-2" for="kindness-stars-text">Current Stars</label>
                <textarea id="kindness-stars-text" class="disney-input w-full h-24 resize-none text-lg" placeholder="No kindness stars yet..."></textarea>
                <input type="hidden" id="kindness-student-id">
            </div>
            <div class="flex justify-end gap-3">
                <button id="clear-kindness-stars-btn" class="px-6 py-2 text-red-600 hover:bg-red-50 rounded-full transition-colors">Clear All</button>
                <button id="cancel-kindness-stars-btn" class="px-6 py-2 text-gray-600 hover:bg-gray-100 rounded-full transition-colors">Cancel</button>
                <button id="save-kindness-stars-btn" class="disney-btn">Save Stars</button>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Load data from localStorage or use default data
            function loadData() {
                const savedData = localStorage.getItem('sundaySchoolAttendance');
                if (savedData) {
                    return JSON.parse(savedData);
                } else {
                    // Default data for first time users
                    return {
                        students: [
                            { id: 1, name: "Emma Johnson", birthdate: "2015-05-12", kindnessStars: "⭐⭐🙏" },
                            { id: 2, name: "Noah Williams", birthdate: "2016-02-28", kindnessStars: "⭐🤝" },
                            { id: 3, name: "Olivia Brown", birthdate: "2015-11-15", kindnessStars: "🙏🙏⭐" },
                            { id: 4, name: "Liam Davis", birthdate: "2016-07-04", kindnessStars: "🤝⭐🤝" },
                            { id: 5, name: "Ava Miller", birthdate: "2015-09-22", kindnessStars: "⭐⭐⭐" }
                        ],
                        dates: [
                            { id: 1, date: "2023-10-01" },
                            { id: 2, date: "2023-10-08" },
                            { id: 3, date: "2023-10-15" }
                        ],
                        records: {
                            // studentId-dateId: {status: 0|1|2, comment: "string"} 
                            // status: 0: absent, 1: present, 2: excused
                            "1-1": {status: 1},
                            "1-2": {status: 1},
                            "1-3": {status: 0},
                            "2-1": {status: 0},
                            "2-2": {status: 1},
                            "2-3": {status: 1},
                            "3-1": {status: 2, comment: "Doctor's appointment"},
                            "3-2": {status: 1},
                            "3-3": {status: 1},
                            "4-1": {status: 1},
                            "4-2": {status: 0},
                            "4-3": {status: 2, comment: "Family vacation"},
                            "5-1": {status: 1},
                            "5-2": {status: 1},
                            "5-3": {status: 1}
                        }
                    };
                }
            }

            // Load history data from localStorage
            function loadHistoryData() {
                const savedHistory = localStorage.getItem('sundaySchoolHistory');
                return savedHistory ? JSON.parse(savedHistory) : [];
            }

            // Save data to localStorage
            function saveData() {
                localStorage.setItem('sundaySchoolAttendance', JSON.stringify(attendanceData));
                localStorage.setItem('sundaySchoolHistory', JSON.stringify(historyData));
            }

            // Initialize data
            const attendanceData = loadData();
            let historyData = loadHistoryData();
            
            // DOM elements
            const table = document.getElementById('attendance-table');
            const addStudentBtn = document.getElementById('add-student-btn');
            const addDateBtn = document.getElementById('add-date-btn');
            const saveSnapshotBtn = document.getElementById('save-snapshot-btn');
            const addStudentModal = document.getElementById('add-student-modal');
            const addDateModal = document.getElementById('add-date-modal');
            const editStudentModal = document.getElementById('edit-student-modal');
            const editDateModal = document.getElementById('edit-date-modal');
            const confirmModal = document.getElementById('confirm-modal');
            const editBirthdateModal = document.getElementById('edit-birthdate-modal');
            const excusedCommentModal = document.getElementById('excused-comment-modal');
            const editKindnessStarsModal = document.getElementById('edit-kindness-stars-modal');
            const historyContainer = document.getElementById('history-container');
            const animalStickersContainer = document.getElementById('animal-stickers-container');
            
            // Animal stickers data
            const animalStickers = [
                // Cute animal SVGs
                `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="100%" height="100%">
                    <circle cx="256" cy="256" r="256" fill="#FFC0CB"/>
                    <circle cx="180" cy="180" r="40" fill="white"/>
                    <circle cx="180" cy="180" r="20" fill="black"/>
                    <circle cx="332" cy="180" r="40" fill="white"/>
                    <circle cx="332" cy="180" r="20" fill="black"/>
                    <circle cx="256" cy="230" r="30" fill="#FF6B6B"/>
                    <ellipse cx="256" cy="320" rx="80" ry="40" fill="white"/>
                    <path d="M176 150 C 150 100, 120 120, 140 160" stroke="black" stroke-width="8" fill="none"/>
                    <path d="M336 150 C 362 100, 392 120, 372 160" stroke="black" stroke-width="8" fill="none"/>
                </svg>`,
                `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="100%" height="100%">
                    <circle cx="256" cy="256" r="256" fill="#FFD700"/>
                    <circle cx="180" cy="180" r="40" fill="white"/>
                    <circle cx="180" cy="180" r="20" fill="black"/>
                    <circle cx="332" cy="180" r="40" fill="white"/>
                    <circle cx="332" cy="180" r="20" fill="black"/>
                    <path d="M200 280 Q 256 340, 312 280" stroke="black" stroke-width="8" fill="none"/>
                    <path d="M150 120 L 200 180" stroke="black" stroke-width="8" fill="none"/>
                    <path d="M362 120 L 312 180" stroke="black" stroke-width="8" fill="none"/>
                </svg>`,
                `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="100%" height="100%">
                    <circle cx="256" cy="256" r="256" fill="#87CEFA"/>
                    <circle cx="180" cy="180" r="35" fill="white"/>
                    <circle cx="180" cy="180" r="15" fill="black"/>
                    <circle cx="332" cy="180" r="35" fill="white"/>
                    <circle cx="332" cy="180" r="15" fill="black"/>
                    <ellipse cx="256" cy="250" rx="30" ry="20" fill="#FF6B6B"/>
                    <path d="M150 100 Q 256 180, 362 100" stroke="black" stroke-width="8" fill="none"/>
                    <path d="M200 320 Q 256 380, 312 320" stroke="black" stroke-width="8" fill="none"/>
                </svg>`,
                `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="100%" height="100%">
                    <circle cx="256" cy="256" r="256" fill="#90EE90"/>
                    <circle cx="180" cy="180" r="40" fill="white"/>
                    <circle cx="180" cy="180" r="20" fill="black"/>
                    <circle cx="332" cy="180" r="40" fill="white"/>
                    <circle cx="332" cy="180" r="20" fill="black"/>
                    <ellipse cx="256" cy="280" rx="60" ry="30" fill="#FF6B6B"/>
                    <path d="M150 120 Q 180 80, 210 120" stroke="black" stroke-width="8" fill="none"/>
                    <path d="M302 120 Q 332 80, 362 120" stroke="black" stroke-width="8" fill="none"/>
                </svg>`,
                `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="100%" height="100%">
                    <circle cx="256" cy="256" r="256" fill="#DDA0DD"/>
                    <circle cx="180" cy="180" r="40" fill="white"/>
                    <circle cx="180" cy="180" r="20" fill="black"/>
                    <circle cx="332" cy="180" r="40" fill="white"/>
                    <circle cx="332" cy="180" r="20" fill="black"/>
                    <path d="M200 260 Q 256 300, 312 260" stroke="black" stroke-width="8" fill="none"/>
                    <ellipse cx="256" cy="180" rx="120" ry="100" fill="none" stroke="black" stroke-width="8"/>
                    <path d="M200 100 L 220 60" stroke="black" stroke-width="8" fill="none"/>
                    <path d="M312 100 L 292 60" stroke="black" stroke-width="8" fill="none"/>
                </svg>`,
                `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="100%" height="100%">
                    <circle cx="256" cy="256" r="256" fill="#F5DEB3"/>
                    <circle cx="200" cy="200" r="30" fill="white"/>
                    <circle cx="200" cy="200" r="15" fill="black"/>
                    <circle cx="312" cy="200" r="30" fill="white"/>
                    <circle cx="312" cy="200" r="15" fill="black"/>
                    <ellipse cx="256" cy="256" rx="40" ry="20" fill="#8B4513"/>
                    <path d="M150 150 Q 256 50, 362 150" stroke="#8B4513" stroke-width="12" fill="none"/>
                    <path d="M200 300 Q 256 350, 312 300" stroke="#8B4513" stroke-width="8" fill="none"/>
                </svg>`,
                `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="100%" height="100%">
                    <circle cx="256" cy="256" r="256" fill="#ADD8E6"/>
                    <circle cx="180" cy="180" r="40" fill="white"/>
                    <circle cx="180" cy="180" r="20" fill="black"/>
                    <circle cx="332" cy="180" r="40" fill="white"/>
                    <circle cx="332" cy="180" r="20" fill="black"/>
                    <path d="M200 260 Q 256 220, 312 260" stroke="black" stroke-width="8" fill="none"/>
                    <path d="M150 120 Q 180 80, 210 120" stroke="black" stroke-width="8" fill="none"/>
                    <path d="M302 120 Q 332 80, 362 120" stroke="black" stroke-width="8" fill="none"/>
                    <path d="M256 300 L 256 350 Q 200 380, 256 400 Q 312 380, 256 350" stroke="black" stroke-width="8" fill="none"/>
                </svg>`,
                `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="100%" height="100%">
                    <circle cx="256" cy="256" r="256" fill="#FFDAB9"/>
                    <ellipse cx="256" cy="360" rx="100" ry="60" fill="#8B4513"/>
                    <circle cx="200" cy="200" r="40" fill="white"/>
                    <circle cx="200" cy="200" r="20" fill="black"/>
                    <circle cx="312" cy="200" r="40" fill="white"/>
                    <circle cx="312" cy="200" r="20" fill="black"/>
                    <ellipse cx="256" cy="260" rx="30" ry="20" fill="black"/>
                    <path d="M150 120 L 180 160" stroke="black" stroke-width="8" fill="none"/>
                    <path d="M362 120 L 332 160" stroke="black" stroke-width="8" fill="none"/>
                </svg>`
            ];
            
            // Show animal sticker function
            function showAnimalSticker(x, y) {
                // Create a new sticker element
                const sticker = document.createElement('div');
                sticker.className = 'animal-sticker';
                
                // Select a random animal sticker
                const randomSticker = animalStickers[Math.floor(Math.random() * animalStickers.length)];
                sticker.innerHTML = randomSticker;
                
                // Position the sticker near the click position
                sticker.style.left = `${x - 40}px`;
                sticker.style.top = `${y - 40}px`;
                
                // Set random float-away direction
                const floatX = (Math.random() * 200 - 100) + 'px';
                const floatY = (Math.random() * -200 - 50) + 'px'; // Always float upward
                const floatRotate = (Math.random() * 40 - 20) + 'deg';
                
                sticker.style.setProperty('--float-x', floatX);
                sticker.style.setProperty('--float-y', floatY);
                sticker.style.setProperty('--float-rotate', floatRotate);
                
                // Add to container
                animalStickersContainer.appendChild(sticker);
                
                // Trigger animation
                setTimeout(() => {
                    sticker.classList.add('active');
                }, 10);
                
                // Remove after animation completes
                setTimeout(() => {
                    sticker.remove();
                }, 2500);
            }
            
            // Render the table
            function renderTable() {
                // Clear existing table content
                const thead = table.querySelector('thead tr');
                thead.innerHTML = `
                    <th class="px-4 py-3 disney-table-header text-left rounded-tl-lg">Kindness Stars</th>
                    <th class="px-4 py-3 disney-table-header text-left">Student Name</th>
                    <th class="px-4 py-3 disney-table-header text-left">Birthdate</th>
                `;
                
                // Add date headers
                attendanceData.dates.forEach((date, index) => {
                    const formattedDate = new Date(date.date).toLocaleDateString('en-US', { 
                        month: 'short', 
                        day: 'numeric' 
                    });
                    
                    const th = document.createElement('th');
                    th.className = 'px-4 py-3 disney-table-header text-center';
                    
                    // Create date display with edit and delete buttons
                    const dateContainer = document.createElement('div');
                    dateContainer.className = 'flex items-center justify-center';
                    
                    const dateText = document.createElement('span');
                    dateText.textContent = formattedDate;
                    dateContainer.appendChild(dateText);
                    
                    const actionContainer = document.createElement('div');
                    actionContainer.className = 'ml-2 flex items-center action-btn';
                    
                    const editBtn = document.createElement('button');
                    editBtn.className = 'text-blue-600 hover:text-blue-800 mr-1';
                    editBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" /></svg>';
                    editBtn.addEventListener('click', () => editDate(date.id));
                    
                    const deleteBtn = document.createElement('button');
                    deleteBtn.className = 'text-red-600 hover:text-red-800';
                    deleteBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" /></svg>';
                    deleteBtn.addEventListener('click', () => confirmDelete('date', date.id));
                    
                    actionContainer.appendChild(editBtn);
                    actionContainer.appendChild(deleteBtn);
                    dateContainer.appendChild(actionContainer);
                    
                    th.appendChild(dateContainer);
                    
                    if (index === attendanceData.dates.length - 1) {
                        th.classList.add('rounded-tr-lg');
                    }
                    
                    thead.appendChild(th);
                });
                
                // Clear and rebuild tbody
                const tbody = table.querySelector('tbody');
                tbody.innerHTML = '';
                
                // Add student rows
                attendanceData.students.forEach((student, studentIndex) => {
                    const tr = document.createElement('tr');
                    tr.className = 'disney-table-row';
                    
                    // Kindness Stars cell
                    const kindnessStarsTd = document.createElement('td');
                    kindnessStarsTd.className = 'px-4 py-3 border-b';
                    
                    const kindnessStarsContainer = document.createElement('div');
                    kindnessStarsContainer.className = 'kindness-stars cursor-pointer';
                    kindnessStarsContainer.innerHTML = student.kindnessStars || '<span class="text-gray-400 italic text-sm">No stars yet</span>';
                    kindnessStarsContainer.addEventListener('click', () => editKindnessStars(student.id));
                    
                    kindnessStarsTd.appendChild(kindnessStarsContainer);
                    tr.appendChild(kindnessStarsTd);
                    
                    // Student name cell with edit and delete buttons
                    const nameTd = document.createElement('td');
                    nameTd.className = 'px-4 py-3 border-b';
                    
                    const nameContainer = document.createElement('div');
                    nameContainer.className = 'flex items-center';
                    
                    const nameText = document.createElement('span');
                    nameText.className = 'font-medium';
                    nameText.textContent = student.name;
                    nameContainer.appendChild(nameText);
                    
                    const actionContainer = document.createElement('div');
                    actionContainer.className = 'ml-2 flex items-center action-btn';
                    
                    const editBtn = document.createElement('button');
                    editBtn.className = 'text-blue-600 hover:text-blue-800 mr-1';
                    editBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" /></svg>';
                    editBtn.addEventListener('click', () => editStudent(student.id));
                    
                    const deleteBtn = document.createElement('button');
                    deleteBtn.className = 'text-red-600 hover:text-red-800';
                    deleteBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" /></svg>';
                    deleteBtn.addEventListener('click', () => confirmDelete('student', student.id));
                    
                    actionContainer.appendChild(editBtn);
                    actionContainer.appendChild(deleteBtn);
                    nameContainer.appendChild(actionContainer);
                    
                    nameTd.appendChild(nameContainer);
                    tr.appendChild(nameTd);
                    
                    // Birthdate cell with edit button
                    const birthdateTd = document.createElement('td');
                    birthdateTd.className = 'px-4 py-3 border-b';
                    
                    const birthdateContainer = document.createElement('div');
                    birthdateContainer.className = 'flex items-center';
                    
                    const birthdateText = document.createElement('span');
                    birthdateText.className = 'font-medium';
                    
                    // Format birthdate
                    if (student.birthdate) {
                        const birthdate = new Date(student.birthdate);
                        birthdateText.textContent = birthdate.toLocaleDateString('en-US', {
                            year: 'numeric',
                            month: 'short',
                            day: 'numeric'
                        });
                    } else {
                        birthdateText.textContent = 'Not set';
                        birthdateText.className = 'text-gray-400 italic';
                    }
                    
                    birthdateContainer.appendChild(birthdateText);
                    
                    const birthdateEditBtn = document.createElement('button');
                    birthdateEditBtn.className = 'ml-2 text-blue-600 hover:text-blue-800 action-btn';
                    birthdateEditBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" /></svg>';
                    birthdateEditBtn.addEventListener('click', () => editBirthdate(student.id));
                    
                    birthdateContainer.appendChild(birthdateEditBtn);
                    birthdateTd.appendChild(birthdateContainer);
                    tr.appendChild(birthdateTd);
                    
                    // Attendance cells
                    attendanceData.dates.forEach(date => {
                        const key = `${student.id}-${date.id}`;
                        const record = attendanceData.records[key] || {status: 0};
                        const status = record.status;
                        const comment = record.comment || '';
                        
                        const td = document.createElement('td');
                        td.className = 'px-4 py-3 border-b';
                        
                        const attendanceCell = document.createElement('div');
                        attendanceCell.className = 'attendance-cell w-12 h-12 rounded-full mx-auto flex items-center justify-center cursor-pointer';
                        
                        if (status === 1) {
                            attendanceCell.classList.add('present');
                            attendanceCell.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" /></svg>';
                        } else if (status === 2) {
                            attendanceCell.classList.add('excused');
                            attendanceCell.classList.add('excused-cell');
                            attendanceCell.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>';
                            
                            // Add comment indicator if there's a comment
                            if (comment) {
                                const commentIndicator = document.createElement('div');
                                commentIndicator.className = 'comment-indicator';
                                commentIndicator.innerHTML = '!';
                                attendanceCell.appendChild(commentIndicator);
                                
                                // Add comment tooltip
                                const commentTooltip = document.createElement('div');
                                commentTooltip.className = 'excused-comment';
                                commentTooltip.textContent = comment;
                                attendanceCell.appendChild(commentTooltip);
                            }
                        } else {
                            attendanceCell.classList.add('absent');
                            attendanceCell.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" /></svg>';
                        }
                        
                        // Add click event to toggle attendance status
                        attendanceCell.addEventListener('click', (e) => {
                            toggleAttendance(student.id, date.id, e);
                        });
                        
                        td.appendChild(attendanceCell);
                        tr.appendChild(td);
                    });
                    
                    tbody.appendChild(tr);
                });
            }
            
            // Toggle attendance status
            function toggleAttendance(studentId, dateId, event) {
                const key = `${studentId}-${dateId}`;
                const record = attendanceData.records[key] || {status: 0};
                const currentStatus = record.status;
                
                // Cycle through: absent (0) -> present (1) -> excused (2) -> absent (0)
                const newStatus = (currentStatus + 1) % 3;
                
                // If changing to present, show animal sticker
                if (newStatus === 1 && event) {
                    showAnimalSticker(event.clientX, event.clientY);
                }
                
                // If changing to excused, prompt for comment
                if (newStatus === 2) {
                    document.getElementById('excused-student-id').value = studentId;
                    document.getElementById('excused-date-id').value = dateId;
                    document.getElementById('excused-comment-text').value = record.comment || '';
                    excusedCommentModal.classList.remove('hidden');
                    
                    // Update status but don't render yet (will render after comment is added)
                    attendanceData.records[key] = {
                        status: newStatus,
                        comment: record.comment || ''
                    };
                } else {
                    // For present or absent, just update the status
                    attendanceData.records[key] = {
                        status: newStatus,
                        comment: record.comment || ''
                    };
                    saveData(); // Save to localStorage
                    renderTable();
                }
            }
            
            // Save excused comment
            function saveExcusedComment() {
                const studentId = parseInt(document.getElementById('excused-student-id').value);
                const dateId = parseInt(document.getElementById('excused-date-id').value);
                const comment = document.getElementById('excused-comment-text').value.trim();
                
                const key = `${studentId}-${dateId}`;
                
                // Update the record with the comment
                attendanceData.records[key] = {
                    status: 2, // Excused
                    comment: comment
                };
                
                saveData(); // Save to localStorage
                excusedCommentModal.classList.add('hidden');
                renderTable();
            }
            
            // Add new student
            function addStudent() {
                const name = document.getElementById('student-name').value.trim();
                const birthdate = document.getElementById('student-birthdate').value;
                
                if (name) {
                    const newId = attendanceData.students.length > 0 ? 
                        Math.max(...attendanceData.students.map(s => s.id)) + 1 : 1;
                    
                    attendanceData.students.push({ id: newId, name, birthdate, kindnessStars: "" });
                    document.getElementById('student-name').value = '';
                    document.getElementById('student-birthdate').value = '';
                    saveData(); // Save to localStorage
                    addStudentModal.classList.add('hidden');
                    renderTable();
                }
            }
            
            // Add new date
            function addDate() {
                const date = document.getElementById('attendance-date').value;
                if (date) {
                    const newId = attendanceData.dates.length > 0 ? 
                        Math.max(...attendanceData.dates.map(d => d.id)) + 1 : 1;
                    
                    // Insert the new date after the birthdate column (which is at index 1)
                    attendanceData.dates.unshift({ id: newId, date });
                    document.getElementById('attendance-date').value = '';
                    saveData(); // Save to localStorage
                    addDateModal.classList.add('hidden');
                    renderTable();
                }
            }

            // Edit student
            function editStudent(studentId) {
                const student = attendanceData.students.find(s => s.id === studentId);
                if (student) {
                    document.getElementById('edit-student-name').value = student.name;
                    document.getElementById('edit-student-id').value = student.id;
                    document.getElementById('edit-student-birthdate').value = student.birthdate || '';
                    editStudentModal.classList.remove('hidden');
                }
            }

            // Update student
            function updateStudent() {
                const name = document.getElementById('edit-student-name').value.trim();
                const birthdate = document.getElementById('edit-student-birthdate').value;
                const id = parseInt(document.getElementById('edit-student-id').value);
                
                if (name) {
                    const studentIndex = attendanceData.students.findIndex(s => s.id === id);
                    if (studentIndex !== -1) {
                        attendanceData.students[studentIndex].name = name;
                        attendanceData.students[studentIndex].birthdate = birthdate;
                        saveData(); // Save to localStorage
                        editStudentModal.classList.add('hidden');
                        renderTable();
                    }
                }
            }

            // Edit birthdate
            function editBirthdate(studentId) {
                const student = attendanceData.students.find(s => s.id === studentId);
                if (student) {
                    document.getElementById('edit-birthdate-value').value = student.birthdate || '';
                    document.getElementById('edit-birthdate-student-id').value = student.id;
                    editBirthdateModal.classList.remove('hidden');
                }
            }

            // Update birthdate
            function updateBirthdate() {
                const birthdate = document.getElementById('edit-birthdate-value').value;
                const id = parseInt(document.getElementById('edit-birthdate-student-id').value);
                
                const studentIndex = attendanceData.students.findIndex(s => s.id === id);
                if (studentIndex !== -1) {
                    attendanceData.students[studentIndex].birthdate = birthdate;
                    saveData(); // Save to localStorage
                    editBirthdateModal.classList.add('hidden');
                    renderTable();
                }
            }

            // Edit date
            function editDate(dateId) {
                const date = attendanceData.dates.find(d => d.id === dateId);
                if (date) {
                    document.getElementById('edit-attendance-date').value = date.date;
                    document.getElementById('edit-date-id').value = date.id;
                    editDateModal.classList.remove('hidden');
                }
            }

            // Update date
            function updateDate() {
                const date = document.getElementById('edit-attendance-date').value;
                const id = parseInt(document.getElementById('edit-date-id').value);
                
                if (date) {
                    const dateIndex = attendanceData.dates.findIndex(d => d.id === id);
                    if (dateIndex !== -1) {
                        attendanceData.dates[dateIndex].date = date;
                        saveData(); // Save to localStorage
                        editDateModal.classList.add('hidden');
                        renderTable();
                    }
                }
            }

            // Edit kindness stars
            function editKindnessStars(studentId) {
                const student = attendanceData.students.find(s => s.id === studentId);
                if (student) {
                    document.getElementById('kindness-student-name').textContent = student.name;
                    document.getElementById('kindness-stars-text').value = student.kindnessStars || '';
                    document.getElementById('kindness-student-id').value = student.id;
                    editKindnessStarsModal.classList.remove('hidden');
                }
            }

            // Save kindness stars
            function saveKindnessStars() {
                const stars = document.getElementById('kindness-stars-text').value;
                const id = parseInt(document.getElementById('kindness-student-id').value);
                
                const studentIndex = attendanceData.students.findIndex(s => s.id === id);
                if (studentIndex !== -1) {
                    attendanceData.students[studentIndex].kindnessStars = stars;
                    saveData(); // Save to localStorage
                    editKindnessStarsModal.classList.add('hidden');
                    renderTable();
                    
                    // Show animal sticker for added stars
                    showAnimalSticker(
                        window.innerWidth / 2, 
                        window.innerHeight / 2
                    );
                }
            }

            // Clear kindness stars
            function clearKindnessStars() {
                document.getElementById('kindness-stars-text').value = '';
            }

            // Add emoji to kindness stars
            function addEmojiToKindnessStars(emoji) {
                const textarea = document.getElementById('kindness-stars-text');
                textarea.value += emoji;
                
                // Create a temporary element to show the emoji pop animation
                const tempEmoji = document.createElement('div');
                tempEmoji.textContent = emoji;
                tempEmoji.style.position = 'absolute';
                tempEmoji.style.fontSize = '2rem';
                tempEmoji.style.zIndex = '9999';
                tempEmoji.style.pointerEvents = 'none';
                tempEmoji.className = 'emoji-pop';
                
                // Position near the textarea
                const rect = textarea.getBoundingClientRect();
                tempEmoji.style.top = `${rect.top + 20}px`;
                tempEmoji.style.left = `${rect.left + rect.width / 2}px`;
                
                document.body.appendChild(tempEmoji);
                
                // Remove after animation
                setTimeout(() => {
                    tempEmoji.remove();
                }, 500);
            }

            // Confirm delete
            function confirmDelete(type, id) {
                const confirmTitle = document.getElementById('confirm-title');
                const confirmMessage = document.getElementById('confirm-message');
                const confirmActionBtn = document.getElementById('confirm-action-btn');
                
                if (type === 'student') {
                    const student = attendanceData.students.find(s => s.id === id);
                    confirmTitle.textContent = 'Delete Student';
                    confirmMessage.textContent = `Are you sure you want to delete ${student.name}? This action cannot be undone.`;
                    confirmActionBtn.textContent = 'Delete';
                    
                    confirmActionBtn.onclick = () => {
                        deleteStudent(id);
                        confirmModal.classList.add('hidden');
                    };
                } else if (type === 'date') {
                    const date = attendanceData.dates.find(d => d.id === id);
                    const formattedDate = new Date(date.date).toLocaleDateString();
                    
                    confirmTitle.textContent = 'Delete Date';
                    confirmMessage.textContent = `Are you sure you want to delete ${formattedDate}? This action cannot be undone.`;
                    confirmActionBtn.textContent = 'Delete';
                    
                    confirmActionBtn.onclick = () => {
                        deleteDate(id);
                        confirmModal.classList.add('hidden');
                    };
                } else if (type === 'history') {
                    confirmTitle.textContent = 'Restore History';
                    confirmMessage.textContent = `Are you sure you want to restore this snapshot? Current data will be replaced.`;
                    confirmActionBtn.textContent = 'Restore';
                    
                    confirmActionBtn.onclick = () => {
                        restoreHistory(id);
                        confirmModal.classList.add('hidden');
                    };
                }
                
                confirmModal.classList.remove('hidden');
            }

            // Delete student
            function deleteStudent(studentId) {
                // Remove student from students array
                attendanceData.students = attendanceData.students.filter(s => s.id !== studentId);
                
                // Remove associated attendance records
                for (const key in attendanceData.records) {
                    if (key.startsWith(`${studentId}-`)) {
                        delete attendanceData.records[key];
                    }
                }
                
                saveData(); // Save to localStorage
                renderTable();
            }

            // Delete date
            function deleteDate(dateId) {
                // Remove date from dates array
                attendanceData.dates = attendanceData.dates.filter(d => d.id !== dateId);
                
                // Remove associated attendance records
                for (const key in attendanceData.records) {
                    if (key.endsWith(`-${dateId}`)) {
                        delete attendanceData.records[key];
                    }
                }
                
                saveData(); // Save to localStorage
                renderTable();
            }

            // Save snapshot to history
            function saveSnapshot() {
                const timestamp = new Date();
                const snapshot = {
                    id: historyData.length > 0 ? Math.max(...historyData.map(h => h.id)) + 1 : 1,
                    timestamp: timestamp,
                    data: JSON.parse(JSON.stringify(attendanceData)) // Deep copy
                };
                
                historyData.push(snapshot);
                saveData(); // Save to localStorage
                renderHistory();
                
                // Show animal sticker for snapshot saved
                showAnimalSticker(
                    window.innerWidth / 2, 
                    window.innerHeight / 2
                );
            }

            // Render history
            function renderHistory() {
                historyContainer.innerHTML = '';
                
                if (historyData.length === 0) {
                    historyContainer.innerHTML = `
                        <div class="text-gray-500 italic text-center py-6 bg-gray-50 rounded-xl">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto mb-2 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                            </svg>
                            <p>No history records yet.</p>
                            <p>Click "Save Snapshot" to create history!</p>
                        </div>
                    `;
                    return;
                }
                
                // Sort history by timestamp (newest first)
                historyData.sort((a, b) => b.timestamp - a.timestamp);
                
                historyData.forEach(item => {
                    const historyItem = document.createElement('div');
                    historyItem.className = 'history-item bg-blue-50 rounded-xl p-4 flex justify-between items-center';
                    
                    const dateInfo = document.createElement('div');
                    
                    const date = new Date(item.timestamp);
                    const formattedDate = date.toLocaleDateString('en-US', {
                        year: 'numeric',
                        month: 'short',
                        day: 'numeric'
                    });
                    
                    const formattedTime = date.toLocaleTimeString('en-US', {
                        hour: '2-digit',
                        minute: '2-digit'
                    });
                    
                    dateInfo.innerHTML = `
                        <div class="font-bold text-blue-700">${formattedDate}</div>
                        <div class="text-sm text-blue-600">${formattedTime}</div>
                        <div class="text-xs text-gray-500 mt-1">
                            ${item.data.students.length} students, ${item.data.dates.length} dates
                        </div>
                    `;
                    
                    const actionBtns = document.createElement('div');
                    actionBtns.className = 'flex gap-2';
                    
                    const restoreBtn = document.createElement('button');
                    restoreBtn.className = 'disney-success-btn py-1 px-3 text-sm flex items-center';
                    restoreBtn.innerHTML = `
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                        </svg>
                        Restore
                    `;
                    restoreBtn.addEventListener('click', () => confirmDelete('history', item.id));
                    
                    const deleteBtn = document.createElement('button');
                    deleteBtn.className = 'disney-danger-btn py-1 px-3 text-sm';
                    deleteBtn.innerHTML = `
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                        </svg>
                    `;
                    deleteBtn.addEventListener('click', () => deleteHistory(item.id));
                    
                    actionBtns.appendChild(restoreBtn);
                    actionBtns.appendChild(deleteBtn);
                    
                    historyItem.appendChild(dateInfo);
                    historyItem.appendChild(actionBtns);
                    
                    historyContainer.appendChild(historyItem);
                });
            }

            // Delete history item
            function deleteHistory(historyId) {
                historyData = historyData.filter(h => h.id !== historyId);
                saveData(); // Save to localStorage
                renderHistory();
            }

            // Restore history
            function restoreHistory(historyId) {
                const historyItem = historyData.find(h => h.id === historyId);
                if (historyItem) {
                    attendanceData.students = JSON.parse(JSON.stringify(historyItem.data.students));
                    attendanceData.dates = JSON.parse(JSON.stringify(historyItem.data.dates));
                    attendanceData.records = JSON.parse(JSON.stringify(historyItem.data.records));
                    
                    saveData(); // Save to localStorage
                    renderTable();
                    
                    // Show animal sticker for restore action
                    showAnimalSticker(
                        window.innerWidth / 2, 
                        window.innerHeight / 2
                    );
                }
            }
            
            // Event listeners
            addStudentBtn.addEventListener('click', () => {
                addStudentModal.classList.remove('hidden');
            });
            
            addDateBtn.addEventListener('click', () => {
                addDateModal.classList.remove('hidden');
            });
            
            saveSnapshotBtn.addEventListener('click', saveSnapshot);
            
            document.getElementById('cancel-student-btn').addEventListener('click', () => {
                addStudentModal.classList.add('hidden');
            });
            
            document.getElementById('save-student-btn').addEventListener('click', addStudent);
            
            document.getElementById('cancel-date-btn').addEventListener('click', () => {
                addDateModal.classList.add('hidden');
            });
            
            document.getElementById('save-date-btn').addEventListener('click', addDate);
            
            document.getElementById('cancel-edit-student-btn').addEventListener('click', () => {
                editStudentModal.classList.add('hidden');
            });
            
            document.getElementById('update-student-btn').addEventListener('click', updateStudent);
            
            document.getElementById('cancel-edit-date-btn').addEventListener('click', () => {
                editDateModal.classList.add('hidden');
            });
            
            document.getElementById('update-date-btn').addEventListener('click', updateDate);
            
            document.getElementById('cancel-confirm-btn').addEventListener('click', () => {
                confirmModal.classList.add('hidden');
            });
            
            document.getElementById('cancel-edit-birthdate-btn').addEventListener('click', () => {
                editBirthdateModal.classList.add('hidden');
            });
            
            document.getElementById('update-birthdate-btn').addEventListener('click', updateBirthdate);
            
            document.getElementById('cancel-excused-comment-btn').addEventListener('click', () => {
                excusedCommentModal.classList.add('hidden');
                
                // If canceling the comment, revert to absent status
                const studentId = parseInt(document.getElementById('excused-student-id').value);
                const dateId = parseInt(document.getElementById('excused-date-id').value);
                const key = `${studentId}-${dateId}`;
                
                // Set to absent (0) if canceling from excused dialog
                attendanceData.records[key] = {status: 0};
                saveData(); // Save to localStorage
                renderTable();
            });
            
            document.getElementById('save-excused-comment-btn').addEventListener('click', saveExcusedComment);
            
            document.getElementById('cancel-kindness-stars-btn').addEventListener('click', () => {
                editKindnessStarsModal.classList.add('hidden');
            });
            
            document.getElementById('save-kindness-stars-btn').addEventListener('click', saveKindnessStars);
            
            document.getElementById('clear-kindness-stars-btn').addEventListener('click', clearKindnessStars);
            
            // Add emoji buttons event listeners in the modal
            document.querySelectorAll('#edit-kindness-stars-modal .emoji-btn').forEach(btn => {
                btn.addEventListener('click', () => {
                    const emoji = btn.getAttribute('data-emoji');
                    addEmojiToKindnessStars(emoji);
                });
            });
            
            // Add emoji buttons event listeners in the legend
            document.querySelectorAll('.mb-6.bg-indigo-50 .emoji-btn').forEach(btn => {
                btn.addEventListener('click', () => {
                    // Find the currently selected student (if any)
                    const selectedStudentId = document.getElementById('kindness-student-id').value;
                    
                    if (selectedStudentId) {
                        // If a student is already selected in the modal, add emoji there
                        const emoji = btn.getAttribute('data-emoji');
                        addEmojiToKindnessStars(emoji);
                    } else {
                        // Otherwise show a message that they need to click on a student's kindness stars first
                        alert("Please click on a student's Kindness Stars cell first to add emojis.");
                    }
                });
            });
            
            // Close modals when clicking outside
            window.addEventListener('click', (e) => {
                if (e.target === addStudentModal) {
                    addStudentModal.classList.add('hidden');
                }
                if (e.target === addDateModal) {
                    addDateModal.classList.add('hidden');
                }
                if (e.target === editStudentModal) {
                    editStudentModal.classList.add('hidden');
                }
                if (e.target === editDateModal) {
                    editDateModal.classList.add('hidden');
                }
                if (e.target === confirmModal) {
                    confirmModal.classList.add('hidden');
                }
                if (e.target === editBirthdateModal) {
                    editBirthdateModal.classList.add('hidden');
                }
                if (e.target === editKindnessStarsModal) {
                    editKindnessStarsModal.classList.add('hidden');
                }
                if (e.target === excusedCommentModal) {
                    // Don't close the excused comment modal when clicking outside
                    // as we need to handle the status change properly
                    // excusedCommentModal.classList.add('hidden');
                }
            });
            
            // Initial render
            renderTable();
            renderHistory();
        });
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'96bc30bc94264080',t:'MTc1NDYyNjUwMy4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
